{"version":3,"sources":["utils/calculateSequence.js","components/CollatzSequenceForm.js","components/CollatzSequence.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","number","n","sequence","push","checkInteger","value","test","CollatzSequenceForm","state","isInteger","handleNumberUpdate","event","setState","target","handleSubmit","preventDefault","props","onSubmit","parseInt","this","className","name","onChange","placeholder","type","React","Component","CollatzSequence","copyText","calculate","calculateSequence","copySequence","dummy","document","createElement","body","appendChild","setAttribute","join","select","execCommand","removeChild","length","readOnly","map","num","i","queryCommandSupported","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,SAACC,GAChB,IAAIC,EAAID,EACJE,EAAW,GAGf,IAFAA,EAASC,KAAKF,GAEPA,EAAI,GACLA,EAAI,IAAM,GAEZA,GAAQ,EACRC,EAASC,KAAKF,KAEdA,EAAI,EAAIA,EAAI,EACZC,EAASC,KAAKF,IAIlB,OAAOC,I,2OCZT,SAASE,EAAaC,GACpB,MAAO,QAAQC,KAAKD,G,IAGDE,E,4MACnBC,MAAQ,CACNR,OAAQ,GACRS,WAAW,G,EAGbC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACZZ,OAAQW,EAAME,OAAOR,MACrBI,UAAWL,EAAaO,EAAME,OAAOR,U,EAIzCS,aAAe,SAACH,GACdA,EAAMI,iBACD,EAAKP,MAAMC,YAEhB,EAAKO,MAAMC,SAASC,SAAS,EAAKV,MAAMR,SAExC,EAAKY,SAAS,CACZZ,OAAQ,GACRS,WAAW,M,uDAKb,OACE,0BAAMQ,SAAUE,KAAKL,cAClBK,KAAKX,MAAMC,UAAY,KACtB,2BAAOW,UAAU,WAAjB,+BAEF,2BACEC,KAAK,SACLhB,MAAOc,KAAKX,MAAMR,OAClBsB,SAAUH,KAAKT,mBACfa,YAAY,mBAEd,4BAAQC,KAAK,UAAb,0B,GArCyCC,IAAMC,W,gBCDlCC,E,4MACnBnB,MAAQ,CACNN,SAAU,GACV0B,SAAU,iB,EAGZC,UAAY,SAAC7B,GACX,EAAKY,SAAS,CACZV,SAAU4B,IAAkB9B,GAC5B4B,SAAU,mB,EAIdG,aAAe,SAACpB,GACd,IAAIqB,EAAQC,SAASC,cAAc,SACnCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,QAAS,EAAK7B,MAAMN,SAASoC,KAAK,MACrDN,EAAMO,SACNN,SAASO,YAAY,QACrBP,SAASE,KAAKM,YAAYT,GAC1B,EAAKpB,SAAS,CAAEgB,SAAU,a,uDAI1B,OACE,yBAAKR,UAAU,YACb,kBAAC,EAAD,CAAqBH,SAAUE,KAAKU,YACnCV,KAAKX,MAAMN,SAASwC,OAAS,EAC5B,2BACE,2BAAIvB,KAAKX,MAAMN,SAAS,IAD1B,aAC4C,IACzCiB,KAAKX,MAAMN,SAASwC,QAErB,KACJ,8BACEC,UAAQ,EACRtC,MAAOc,KAAKX,MAAMN,SACf0C,KAAI,SAACC,EAAKC,GAAN,MAAY,IAAMA,EAAI,KAAOD,KACjCP,KAAK,QAETL,SAASc,sBAAsB,UAC7B5B,KAAKX,MAAMN,SAASwC,OAAS,EAC5B,4BAAQM,QAAS7B,KAAKY,cAAeZ,KAAKX,MAAMoB,UAC9C,W,GA1C+BH,IAAMC,WCOpCuB,MATf,WACE,OACE,yBAAK7B,UAAU,OACb,0DACA,kBAAC,EAAD,QCGc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.197cb84c.chunk.js","sourcesContent":["module.exports = (number) => {\r\n  let n = number;\r\n  let sequence = [];\r\n  sequence.push(n);\r\n\r\n  while (n > 1) {\r\n    if (n % 2 === 0) {\r\n      // Even\r\n      n = n / 2;\r\n      sequence.push(n);\r\n    } else {\r\n      n = 3 * n + 1;\r\n      sequence.push(n);\r\n    }\r\n  }\r\n\r\n  return sequence;\r\n};\r\n","import React from 'react';\r\n\r\nimport './CollatzSequenceForm.css';\r\n\r\nfunction checkInteger(value) {\r\n  return /^\\d+$/.test(value);\r\n}\r\n\r\nexport default class CollatzSequenceForm extends React.Component {\r\n  state = {\r\n    number: '',\r\n    isInteger: false\r\n  };\r\n\r\n  handleNumberUpdate = (event) => {\r\n    this.setState({\r\n      number: event.target.value,\r\n      isInteger: checkInteger(event.target.value)\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!this.state.isInteger) return;\r\n\r\n    this.props.onSubmit(parseInt(this.state.number));\r\n\r\n    this.setState({\r\n      number: '',\r\n      isInteger: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        {this.state.isInteger ? null : (\r\n          <label className=\"warning\">Must be a positive integer!</label>\r\n        )}\r\n        <input\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          onChange={this.handleNumberUpdate}\r\n          placeholder=\"Enter a number\"\r\n        ></input>\r\n        <button type=\"submit\">Generate Sequence</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport './CollatzSequence.css';\r\n\r\nimport CollatzSequenceForm from './CollatzSequenceForm';\r\nimport calculateSequence from '../utils/calculateSequence';\r\n\r\nexport default class CollatzSequence extends React.Component {\r\n  state = {\r\n    sequence: [],\r\n    copyText: 'Copy Sequence'\r\n  };\r\n\r\n  calculate = (number) => {\r\n    this.setState({\r\n      sequence: calculateSequence(number),\r\n      copyText: 'Copy Sequence'\r\n    });\r\n  };\r\n\r\n  copySequence = (event) => {\r\n    var dummy = document.createElement('input');\r\n    document.body.appendChild(dummy);\r\n    dummy.setAttribute('value', this.state.sequence.join(','));\r\n    dummy.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(dummy);\r\n    this.setState({ copyText: 'Copied!' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sequence\">\r\n        <CollatzSequenceForm onSubmit={this.calculate} />\r\n        {this.state.sequence.length > 0 ? (\r\n          <p>\r\n            <b>{this.state.sequence[0]}</b> - Length:{' '}\r\n            {this.state.sequence.length}\r\n          </p>\r\n        ) : null}\r\n        <textarea\r\n          readOnly\r\n          value={this.state.sequence\r\n            .map((num, i) => '#' + i + ': ' + num)\r\n            .join('\\n')}\r\n        />\r\n        {document.queryCommandSupported('copy') &&\r\n          (this.state.sequence.length > 0 ? (\r\n            <button onClick={this.copySequence}>{this.state.copyText}</button>\r\n          ) : null)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport CollatzSequence from './components/CollatzSequence';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Collatz Sequence Generator</h1>\n      <CollatzSequence />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}